* git-dotfiles: Store =$HOME= dot-files in Git

** Activating git-dotiles To Manage Your =$HOME=

  To activate, first create the =git-dotfiles= alias:

  : alias git-dotfiles='git --git-dir=$HOME/.git-dotfiles --work-tree=$HOME'

  Check out the =pjkundert/git-dotfiles=  Git repo to =~/.git-dotfiles=:

  : git checkout git@github.com:pjkundert/git-dotfiles.git .git-dotfiles

  See how your current home directory's dot-files configuration compares:

  : git-dotfiles status

** Use =$HOME/.bash_personal= for Private Configurations

   For API tokens, etc., put them in =.bash_personal=.  This file will not be
   stored in the =git-dotfiles= Git repo.

* Nix Enviroment via =nix-env=

  A (partial) replacement for =homebrew= is provided by the =$HOME/env.nix= file.  List any
  desired Nix targets here to have them added to your =$HOME/.nix-profile/bin=.

  Use the =nix-env-update= alias to update your system to the current set of targets in =env.nix=.

* References

  This implementation was derived from:

** https://atlassian.com/git/tutorials/dotfiles

   Provides a way to have a Git managed =$HOME= directory.

   - Changed the =git= alias for accessing the Git repo to =git-dotfiles=

** https://checkoway.net/musings/nix

   Sensibly manage the Nix defaults used by =nix-env=, etc.

** https://nixos.org/manual/nixos/stable/#module-services-emacs

   Provision a specific version of Emacs and any modules required.

** https://nixos.wiki/wiki/TexLive

   Integrated this approach to provisioning texlive into =emacs.nix=.
